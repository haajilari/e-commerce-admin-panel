// src/pages/products/AddProductPage.tsx
import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { Container, Typography, Box } from '@mui/material'
import { type FormikHelpers } from 'formik'

import ProductForm from '@/features/products/components/ProductForm'
import { type ProductFormData } from '@/features/products/types'
// import { createProduct } from '@/features/products/services/productService' // We will create this service soon

// Snackbar/Alert for feedback (can be a more sophisticated notification system later)
import Alert from '@mui/material/Alert'
import Snackbar from '@mui/material/Snackbar'

const AddProductPage: React.FC = () => {
  const navigate = useNavigate()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)

  const initialValues: ProductFormData = {
    name: '',
    description: '',
    price: 0,
    sku: '',
    stockQuantity: 0,
    category: '', // Default to empty or first category
    imageUrl: '',
    isActive: true,
    weight: undefined, // Optional fields can be undefined
    dimensions: undefined, // Or null, matching Yup schema's .nullable()
    tags: [],
  }

  const handleSubmit = async (
    values: ProductFormData,
    formikHelpers: FormikHelpers<ProductFormData>
  ) => {
    setIsSubmitting(true)
    setError(null)
    setSuccess(null)
    try {
      console.log('Submitting new product:', values)
      // In a real app, an ID might be returned or generated by the backend
      //   const newProduct = await createProduct(values) // Simulated API call
      //   console.log('Product created successfully:', newProduct)
      //   setSuccess(`Product "${newProduct.name}" was created successfully.`)
      formikHelpers.resetForm() // Reset form after successful submission

      // Optionally, navigate away after a short delay
      setTimeout(() => {
        navigate('/products') // Navigate to product list page (we'll create this route later)
      }, 2000)
    } catch (err: any) {
      console.error('Failed to create product:', err)
      setError(err.message || 'Error creating product. Please try again.')
    } finally {
      setIsSubmitting(false)
      formikHelpers.setSubmitting(false) // Inform Formik submission is done
    }
  }

  return (
    <Container maxWidth="md">
      <Box sx={{ my: 4 }}>
        {/* PageHeader could be used here if we make it more generic */}
        {/* For now, simple Typography */}
        {/* <PageHeader title="Add New Product" /> We can use this from previous module */}

        {success && (
          <Snackbar
            open={!!success}
            autoHideDuration={6000}
            onClose={() => setSuccess(null)}
            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
          >
            <Alert onClose={() => setSuccess(null)} severity="success" sx={{ width: '100%' }}>
              {success}
            </Alert>
          </Snackbar>
        )}
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        <ProductForm
          initialValues={initialValues}
          onSubmit={handleSubmit}
          isLoading={isSubmitting}
          submitButtonText="Create Product"
          formTitle="Add New Product"
        />
      </Box>
    </Container>
  )
}

export default AddProductPage
